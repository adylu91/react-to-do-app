{"version":3,"sources":["components/Header.js","components/ActiveTasks.js","components/AddTask.js","components/FinishedTasks.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","ActiveTasks","props","display","tasksArr","handleAddTaskEvents","map","elem","done","style","color","date","priority","text","name","id","onClick","icon","faCheckCircle","faTrashAlt","length","marginBottom","fontSize","AddTask","priortiy","minDate","taskText","htmlFor","type","value","min","onChange","checked","placeholder","FinishedTasks","element","App","event","currentTarget","setState","target","state","console","log","filter","el","Number","task","Date","getTime","Math","floor","random","window","alert","toISOString","substr","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d1fbc74.chunk.js","sourcesContent":["import \"./css/Header.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"headerLogo section\">\r\n      <span>ToDo </span> <span>App</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import \"./css/ActiveTasks.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckCircle, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ActiveTasks = (props) => {\r\n  let tasksArr = [...props.tasksArr];\r\n  let display;\r\n  const handleAddTaskEvents = props.handleAddTaskEvents;\r\n\r\n  tasksArr = tasksArr.map((elem) => {\r\n    let element;\r\n    if (elem.done === false) {\r\n      element = (\r\n        <>\r\n          <div className=\"eachActiveTask\" key={elem.id}>\r\n            <div className=\"informations\">\r\n              <div style={{ color: \"grey\" }}>{elem.date}</div>\r\n              {elem.priority === true ? (\r\n                <div style={{ color: \"red\" }}>{elem.text}</div>\r\n              ) : (\r\n                <div>{elem.text}</div>\r\n              )}\r\n            </div>\r\n            <div className=\"actions\">\r\n              <button\r\n                name=\"makeTaskDone\"\r\n                id={elem.id}\r\n                onClick={handleAddTaskEvents}\r\n              >\r\n                <FontAwesomeIcon icon={faCheckCircle} />\r\n              </button>\r\n              <button\r\n                name=\"removeTask\"\r\n                id={elem.id}\r\n                onClick={handleAddTaskEvents}\r\n              >\r\n                <FontAwesomeIcon icon={faTrashAlt} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n        </>\r\n      );\r\n    } else {\r\n      element = null;\r\n    }\r\n    return element;\r\n  });\r\n\r\n  if (tasksArr.length === 0) {\r\n    display = \"Brak zadań do wyświetlenia\";\r\n  } else {\r\n    display = (\r\n      <div>\r\n        <div style={{ marginBottom: \"15px\", fontSize: \"24px\" }}>\r\n          Lista zadań:\r\n          <hr />\r\n        </div>{\" \"}\r\n        {tasksArr}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div className=\"section\">{display} </div>;\r\n};\r\n\r\nexport default ActiveTasks;\r\n","import \"./css/AddTask.css\";\r\n\r\nconst AddTask = (props) => {\r\n  const handleAddTaskEvents = props.handleAddTaskEvents;\r\n  const priortiy = props.priority;\r\n  const minDate = props.minDate;\r\n  const date = props.date;\r\n  const taskText = props.taskText;\r\n  return (\r\n    <div className=\"addTask_Wrapper section\">\r\n      <label htmlFor=\"addTask_Task\">\r\n        Data zadania:\r\n        <input\r\n          type=\"date\"\r\n          id=\"addTask_Date\"\r\n          name=\"addTask_Date\"\r\n          value={date}\r\n          min={minDate}\r\n          // max=\"2018-12-31\"\r\n          onChange={handleAddTaskEvents}\r\n        ></input>\r\n      </label>\r\n\r\n      <label htmlFor=\"addTask_Priority\">\r\n        Dodaj wysoki priorytet:\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"addTask_Priority\"\r\n          name=\"addTask_Priority\"\r\n          checked={priortiy}\r\n          onChange={handleAddTaskEvents}\r\n        ></input>\r\n      </label>\r\n\r\n      <div>\r\n        <button\r\n          className=\"addTask_Btn\"\r\n          name=\"addTask_Btn\"\r\n          onClick={handleAddTaskEvents}\r\n        >\r\n          Dodaj\r\n        </button>\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor=\"addTask_Text\"> Treść zadania:</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"addTask_Text\"\r\n          id=\"addTask_Text\"\r\n          placeholder=\"Wpisz treść zadania...\"\r\n          onChange={handleAddTaskEvents}\r\n          value={taskText}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTask;\r\n","const FinishedTasks = (props) => {\r\n  let tasksArr = [...props.tasksArr];\r\n\r\n  tasksArr = tasksArr.map((elem) => {\r\n    let element = null;\r\n    if (elem.done === true) {\r\n      element = (\r\n        <div>\r\n          <div>{elem.date}</div>\r\n          <div>{elem.text}</div>\r\n          <hr />\r\n        </div>\r\n      );\r\n    }\r\n    return element;\r\n  });\r\n\r\n  return (\r\n    <div className=\"section\">\r\n      <div>\r\n        Zadania zakończone: <hr></hr>\r\n      </div>\r\n      {tasksArr}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FinishedTasks;\r\n","import React, { Component } from \"react\";\nimport \"./css/App.css\";\nimport Header from \"./Header.js\";\nimport ActiveTasks from \"./ActiveTasks.js\";\nimport AddTask from \"./AddTask\";\nimport FinishedTasks from \"./FinishedTasks\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasksArr: [],\n      date: \"\",\n      priority: false,\n      taskText: \"\",\n      minDate: \"\",\n    };\n  }\n\n  componentDidMount() {\n    let date = new Date();\n    date = date.toISOString().substr(0, 10);\n    this.setState({\n      date: date,\n      minDate: date,\n    });\n  }\n\n  handleAddTaskEvents = (event) => {\n    // console.log(event.currentTarget);\n\n    if (event.currentTarget.name === \"addTask_Text\") {\n      this.setState({\n        taskText: event.target.value,\n      });\n    }\n\n    if (event.currentTarget.name === \"addTask_Date\") {\n      this.setState({\n        date: event.target.value,\n      });\n    }\n\n    if (event.currentTarget.name === \"addTask_Priority\") {\n      this.setState({\n        priority: !this.state.priority,\n      });\n    }\n\n    if (event.currentTarget.name === \"removeTask\") {\n      let tasksArr = [...this.state.tasksArr];\n      console.log(tasksArr);\n      const id = event.currentTarget.id;\n      console.log(id);\n      tasksArr = tasksArr.filter((el) => {\n        return Number(el.id) !== Number(id);\n      });\n      this.setState({\n        tasksArr,\n      });\n    }\n\n    if (event.currentTarget.name === \"makeTaskDone\") {\n      let tasksArr = [...this.state.tasksArr];\n      console.log(tasksArr);\n      const id = event.currentTarget.id;\n      console.log(id);\n      tasksArr = tasksArr.map((el) => {\n        if (Number(el.id) === Number(id)) {\n          el.done = true;\n        }\n        return el;\n      });\n      this.setState({\n        tasksArr,\n      });\n    }\n\n    if (event.currentTarget.name === \"addTask_Btn\") {\n      const task = {\n        id: \"\",\n        date: \"\",\n        priority: false,\n        text: \"\",\n        done: false,\n      };\n\n      task.id = (function () {\n        return new Date().getTime() + Math.floor(Math.random() * 1000);\n      })();\n\n      task.date = this.state.date;\n      task.priority = this.state.priority;\n      task.text = this.state.taskText;\n\n      if (task.text === \"\") {\n        window.alert(\"treść zadania nie może być pusta!\");\n      } else {\n        this.setState({\n          tasksArr: [...this.state.tasksArr, task],\n          priority: false,\n          taskText: \"\",\n          date: this.state.minDate,\n        });\n      }\n    }\n  };\n\n  render() {\n    const { date, priority, taskText, minDate } = this.state;\n    return (\n      <div className=\"appWrapper\">\n        <Header />\n        <AddTask\n          handleAddTaskEvents={this.handleAddTaskEvents}\n          date={date}\n          priority={priority}\n          taskText={taskText}\n          minDate={minDate}\n        />\n        <ActiveTasks\n          tasksArr={this.state.tasksArr}\n          handleAddTaskEvents={this.handleAddTaskEvents}\n        />\n        <FinishedTasks tasksArr={this.state.tasksArr} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}